{
  "service": {
    "service": "serverless-udagram-app",
    "serviceObject": {
      "name": "serverless-udagram-app"
    },
    "provider": {
      "stage": "dev",
      "variableSyntax": "\\${([ ~:a-zA-Z0-9._@'\",\\-\\/\\(\\)*]+?)}",
      "name": "aws",
      "runtime": "nodejs8.10",
      "region": "us-east-2",
      "environment": {
        "GROUPS_TABLE": "Groups-dev",
        "IMAGES_TABLE": "Images-dev",
        "IMAGE_ID_INDEX": "ImageIdIndex"
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:Scan",
            "dynamodb:PutItem",
            "dynamodb:GetItem"
          ],
          "Resource": "arn:aws:dynamodb:us-east-2:*:table/Groups-dev"
        },
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:Query"
          ],
          "Resource": "arn:aws:dynamodb:us-east-2:*:table/Images-dev"
        },
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:Query"
          ],
          "Resource": "arn:aws:dynamodb:us-east-2:*:table/Images-dev/index/ImageIdIndex"
        }
      ],
      "versionFunctions": true,
      "remoteFunctionData": null,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "GetGroupsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/serverless-udagram-app-dev-GetGroups"
            }
          },
          "CreateGroupLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/serverless-udagram-app-dev-CreateGroup"
            }
          },
          "GetImagesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/serverless-udagram-app-dev-GetImages"
            }
          },
          "CreateImageLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/serverless-udagram-app-dev-CreateImage"
            }
          },
          "GetImageLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/serverless-udagram-app-dev-GetImage"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "dev",
                        "serverless-udagram-app",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/serverless-udagram-app-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/serverless-udagram-app-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][1]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][2]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "serverless-udagram-app",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "GetGroupsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/serverless-udagram-app/dev/1570411805658-2019-10-07T01:30:05.658Z/serverless-udagram-app.zip"
              },
              "FunctionName": "serverless-udagram-app-dev-GetGroups",
              "Handler": "src/lambda/http/getGroups.handler",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs8.10",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "GROUPS_TABLE": "Groups-dev",
                  "IMAGES_TABLE": "Images-dev",
                  "IMAGE_ID_INDEX": "ImageIdIndex"
                }
              }
            },
            "DependsOn": [
              "GetGroupsLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "GetGroupsLambdaVersiontwjruRgaKvfT5Mm3v674o8vvp6vl0RfosgOG2wRcg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetGroupsLambdaFunction"
              },
              "CodeSha256": "YyNRpuc391VB9eO+pUta2SYpeo7Xjupaipw8qONSUfY="
            }
          },
          "CreateGroupLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/serverless-udagram-app/dev/1570411805658-2019-10-07T01:30:05.658Z/serverless-udagram-app.zip"
              },
              "FunctionName": "serverless-udagram-app-dev-CreateGroup",
              "Handler": "src/lambda/http/createGroup.handler",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs8.10",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "GROUPS_TABLE": "Groups-dev",
                  "IMAGES_TABLE": "Images-dev",
                  "IMAGE_ID_INDEX": "ImageIdIndex"
                }
              }
            },
            "DependsOn": [
              "CreateGroupLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "CreateGroupLambdaVersionpS4qcw6P0jh5u52DLgThiXoQvJKCqqdWRVZ4Mhw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateGroupLambdaFunction"
              },
              "CodeSha256": "YyNRpuc391VB9eO+pUta2SYpeo7Xjupaipw8qONSUfY="
            }
          },
          "GetImagesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/serverless-udagram-app/dev/1570411805658-2019-10-07T01:30:05.658Z/serverless-udagram-app.zip"
              },
              "FunctionName": "serverless-udagram-app-dev-GetImages",
              "Handler": "src/lambda/http/getImages.handler",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs8.10",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "GROUPS_TABLE": "Groups-dev",
                  "IMAGES_TABLE": "Images-dev",
                  "IMAGE_ID_INDEX": "ImageIdIndex"
                }
              }
            },
            "DependsOn": [
              "GetImagesLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "GetImagesLambdaVersioniJgqJ1J5xO1PBRnaVNGf8B5Bz2SujW2tCF2POnGP0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetImagesLambdaFunction"
              },
              "CodeSha256": "YyNRpuc391VB9eO+pUta2SYpeo7Xjupaipw8qONSUfY="
            }
          },
          "CreateImageLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/serverless-udagram-app/dev/1570411805658-2019-10-07T01:30:05.658Z/serverless-udagram-app.zip"
              },
              "FunctionName": "serverless-udagram-app-dev-CreateImage",
              "Handler": "src/lambda/http/createImage.handler",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs8.10",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "GROUPS_TABLE": "Groups-dev",
                  "IMAGES_TABLE": "Images-dev",
                  "IMAGE_ID_INDEX": "ImageIdIndex"
                }
              }
            },
            "DependsOn": [
              "CreateImageLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "CreateImageLambdaVersionmZ2wRE2KeMaIAolJA4Q8R99LH2Ynp7mGEyNCXbjHg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateImageLambdaFunction"
              },
              "CodeSha256": "YyNRpuc391VB9eO+pUta2SYpeo7Xjupaipw8qONSUfY="
            }
          },
          "GetImageLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/serverless-udagram-app/dev/1570411805658-2019-10-07T01:30:05.658Z/serverless-udagram-app.zip"
              },
              "FunctionName": "serverless-udagram-app-dev-GetImage",
              "Handler": "src/lambda/http/getImage.handler",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs8.10",
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "GROUPS_TABLE": "Groups-dev",
                  "IMAGES_TABLE": "Images-dev",
                  "IMAGE_ID_INDEX": "ImageIdIndex"
                }
              }
            },
            "DependsOn": [
              "GetImageLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "GetImageLambdaVersionGk8GhLH03XP0En5E3bBZxoa22kmi4XGyDSr9PAIe4UI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetImageLambdaFunction"
              },
              "CodeSha256": "YyNRpuc391VB9eO+pUta2SYpeo7Xjupaipw8qONSUfY="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-serverless-udagram-app",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              }
            }
          },
          "ApiGatewayResourceGroups": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "groups",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceGroupsGroupidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceGroups"
              },
              "PathPart": "{groupId}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceGroupsGroupidVarImages": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceGroupsGroupidVar"
              },
              "PathPart": "images",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceImages": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "images",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceImagesImageidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceImages"
              },
              "PathPart": "{imageId}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodGroupsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceGroups"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodGroupsGroupidVarImagesOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceGroupsGroupidVarImages"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodImagesImageidVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true,
                    "method.response.header.Access-Control-Allow-Credentials": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'",
                      "method.response.header.Access-Control-Allow-Credentials": "'false'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".*\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceImagesImageidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodGroupsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceGroups"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetGroupsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodGroupsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceGroups"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateGroupLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "RequestBodyValidator"
              },
              "RequestModels": {
                "application/json": "GroupRequest"
              }
            },
            "DependsOn": [
              "GroupRequestModel"
            ]
          },
          "ApiGatewayMethodGroupsGroupidVarImagesGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceGroupsGroupidVarImages"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetImagesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodImagesImageidVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceImagesImageidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetImageLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayDeployment1570411777969": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodGroupsOptions",
              "ApiGatewayMethodGroupsGroupidVarImagesOptions",
              "ApiGatewayMethodImagesImageidVarOptions",
              "ApiGatewayMethodGroupsGet",
              "ApiGatewayMethodGroupsPost",
              "ApiGatewayMethodGroupsGroupidVarImagesGet",
              "ApiGatewayMethodImagesImageidVarGet"
            ]
          },
          "GetGroupsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetGroupsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateGroupLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateGroupLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetImagesLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetImagesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetImageLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetImageLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GroupRequestModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ContentType": "application/json",
              "Name": "GroupRequest",
              "Schema": {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "title": "group",
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "description"
                ],
                "additionalProperties": false
              }
            }
          },
          "GroupsDynamoDBTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST",
              "TableName": "Groups-dev"
            }
          },
          "ImagesDynamoDBTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "AttributeDefinitions": [
                {
                  "AttributeName": "groupId",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "timestamp",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "imageId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "groupId",
                  "KeyType": "HASH"
                },
                {
                  "AttributeName": "timestamp",
                  "KeyType": "RANGE"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST",
              "TableName": "Images-dev",
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "ImageIdIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "imageId",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ]
            }
          },
          "RequestBodyValidator": {
            "Type": "AWS::ApiGateway::RequestValidator",
            "Properties": {
              "Name": "request-body-validator",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ValidateRequestBody": true,
              "ValidateRequestParameters": false
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          },
          "GetGroupsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetGroupsLambdaVersiontwjruRgaKvfT5Mm3v674o8vvp6vl0RfosgOG2wRcg"
            }
          },
          "CreateGroupLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateGroupLambdaVersionpS4qcw6P0jh5u52DLgThiXoQvJKCqqdWRVZ4Mhw"
            }
          },
          "GetImagesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetImagesLambdaVersioniJgqJ1J5xO1PBRnaVNGf8B5Bz2SujW2tCF2POnGP0"
            }
          },
          "CreateImageLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateImageLambdaVersionmZ2wRE2KeMaIAolJA4Q8R99LH2Ynp7mGEyNCXbjHg"
            }
          },
          "GetImageLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetImageLambdaVersionGk8GhLH03XP0En5E3bBZxoa22kmi4XGyDSr9PAIe4UI"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            }
          },
          "AwsDocApiId": {
            "Description": "API ID",
            "Value": {
              "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GroupRequestModel\"][\"Properties\"][\"RestApiId\"]"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "documentation": {
        "api": {
          "info": {
            "version": "v1.0.0",
            "title": "Udagram API",
            "description": "Serverless application for images sharing"
          }
        },
        "models": [
          {
            "name": "GroupRequest",
            "contentType": "application/json",
            "schema": {
              "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GroupRequestModel\"][\"Properties\"][\"Schema\"]"
            }
          }
        ]
      }
    },
    "plugins": [
      "serverless-webpack",
      "serverless-reqvalidator-plugin",
      "serverless-aws-documentation"
    ],
    "pluginsData": {},
    "functions": {
      "GetGroups": {
        "handler": "src/lambda/http/getGroups.handler",
        "events": [
          {
            "http": {
              "method": "get",
              "path": "groups",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "serverless-udagram-app-dev-GetGroups",
        "package": {
          "artifact": ".serverless/serverless-udagram-app.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs8.10",
        "vpc": {}
      },
      "CreateGroup": {
        "handler": "src/lambda/http/createGroup.handler",
        "events": [
          {
            "http": {
              "method": "post",
              "path": "groups",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "reqValidatorName": "RequestBodyValidator",
              "documentation": {
                "summary": "Create a new group",
                "description": "Create a new group",
                "requestModels": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodGroupsPost\"][\"Properties\"][\"RequestModels\"]"
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "serverless-udagram-app-dev-CreateGroup",
        "package": {
          "artifact": ".serverless/serverless-udagram-app.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs8.10",
        "vpc": {}
      },
      "GetImages": {
        "handler": "src/lambda/http/getImages.handler",
        "events": [
          {
            "http": {
              "method": "get",
              "path": "groups/{groupId}/images",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "serverless-udagram-app-dev-GetImages",
        "package": {
          "artifact": ".serverless/serverless-udagram-app.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs8.10",
        "vpc": {}
      },
      "CreateImage": {
        "handler": "src/lambda/http/createImage.handler",
        "events": [],
        "name": "serverless-udagram-app-dev-CreateImage",
        "package": {
          "artifact": ".serverless/serverless-udagram-app.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs8.10",
        "vpc": {}
      },
      "GetImage": {
        "handler": "src/lambda/http/getImage.handler",
        "events": [
          {
            "http": {
              "method": "get",
              "path": "images/{imageId}",
              "cors": {
                "origins": [
                  "*"
                ],
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "serverless-udagram-app-dev-GetImage",
        "package": {
          "artifact": ".serverless/serverless-udagram-app.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs8.10",
        "vpc": {}
      }
    },
    "resources": {
      "Resources": {
        "GroupsDynamoDBTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST",
            "TableName": "Groups-dev"
          }
        },
        "ImagesDynamoDBTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "AttributeDefinitions": [
              {
                "AttributeName": "groupId",
                "AttributeType": "S"
              },
              {
                "AttributeName": "timestamp",
                "AttributeType": "S"
              },
              {
                "AttributeName": "imageId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "groupId",
                "KeyType": "HASH"
              },
              {
                "AttributeName": "timestamp",
                "KeyType": "RANGE"
              }
            ],
            "BillingMode": "PAY_PER_REQUEST",
            "TableName": "Images-dev",
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "ImageIdIndex",
                "KeySchema": [
                  {
                    "AttributeName": "imageId",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ]
          }
        },
        "RequestBodyValidator": {
          "Type": "AWS::ApiGateway::RequestValidator",
          "Properties": {
            "Name": "request-body-validator",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            },
            "ValidateRequestBody": true,
            "ValidateRequestParameters": false
          }
        }
      },
      "Outputs": {}
    },
    "serviceFilename": "serverless.yml",
    "layers": {}
  },
  "package": {
    "artifactDirectoryName": "serverless/serverless-udagram-app/dev/1570411805658-2019-10-07T01:30:05.658Z",
    "artifact": ""
  }
}