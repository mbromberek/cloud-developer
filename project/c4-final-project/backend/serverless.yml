service:
  name: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs8.10

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}
  
  environment:
    TODOS_TABLE: Todos-${self:provider.stage}
    TODOS_ID_INDEX: TodoIdIndex
    # TODO Need an S3 Bucket for storing images

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:DeleteItem
        - dynamodb:UpdateItem
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:UpdateItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.TODOS_ID_INDEX}


custom:
  topicName: todoTopic-${self:provider.stage}
  documentation:
    api:
      info:
        version: v1.0.0
        title: ToDo API
        description: Serverless application for tracking ToDos
    models:
      - name: TodoCreateRequest
        contentType: application/json
        schema: ${file(src/models/create-todo-request.json)}
      - name: TodoUpdateRequest
        contentType: application/json
        schema: ${file(src/models/update-todo-request.json)}


functions:

#  Auth:
#    handler: src/lambda/auth/auth0Authorizer.handler

  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true

  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          reqValidatorName: RequestBodyValidator
          documentation: 
            summary: Create a new To Do
            description: Create a new To Do
            requestModels: 
              'application/json': TodoCreateRequest

  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
         method: put
         path: todos/{todoId}
         cors: true
         reqValidatorName: RequestBodyValidator
         documentation: 
           summary: Update a To Do
           description: Update a To Do
           requestModels: 
             'application/json': TodoUpdateRequest

  # TODO: Configure this function
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
         method: delete
         path: todos/{todoId}
         cors: true
         documentation: 
           summary: Delete a To Do
           description: Delete a To Do

  # TODO: Configure this function
#  GenerateUploadUrl:
#    handler: src/lambda/http/generateUploadUrl.handler
#    events:
#      - http:
#          method: post
#          path: todos/{todoId}/attachment

resources:
  Resources:
    # TODO: Add any necessary AWS resources
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    ToDosDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: todoId
            AttributeType: S
        KeySchema:
          - AttributeName: todoId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}

    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

